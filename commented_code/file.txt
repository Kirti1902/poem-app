below is my poem app code :

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Poem Book</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
</head>
<body>
    <div class="container">
        <header>
            <h1>Poem Book</h1>
            <p>Write, View, Edit, and Delete Poems!</p>
        </header>

        <div class="form">
            <input type="text" id="poemTitle" placeholder="Enter Poem Title" />
            <textarea id="poemText" placeholder="Write your poem here..."></textarea>
            <button id="submitPoem">Add Poem</button>
        </div>

        <div class="notebook-container">
            <button id="openNotebook" class="notebook-btn">Open Poem Book</button>
            <button id="saveWholeBook" class="notebook-btn">Save Whole Book as PDF</button>
        </div>

        <!-- Poem Book -->
        <div id="notebook" class="notebook">
            <div class="book">
                <div class="pageWrapper" id="pageWrapper"></div>
                <div class="nav-arrows">
                    <button id="prevPage" class="nav-btn">&#8592;</button>
                    <button id="nextPage" class="nav-btn">&#8594;</button>
                </div>
            </div>
        </div>
    </div>

    <!-- View Poem Modal -->
    <div id="viewModal" class="modal">
        <div class="modal-content">
            <span class="close" id="viewClose">&times;</span>
            <div>
                <h3 id="viewTitle"></h3>
                <p id="viewPoemText"></p>
            </div>
        </div>
    </div>

    <!-- Edit Poem Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close" id="editClose">&times;</span>
            <h2>Edit Poem</h2>
            <input type="text" id="editTitle" />
            <textarea id="editText" style="background: border-box;height: 66%;width: -webkit-fill-available;padding: 10px;margin: revert;"></textarea>
            <button id="saveEditedPoem">Save</button>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>

const poemForm = document.getElementById('submitPoem');
const poemTitleInput = document.getElementById('poemTitle');
const poemTextInput = document.getElementById('poemText');
const openNotebookBtn = document.getElementById('openNotebook');
const pageWrapper = document.getElementById('pageWrapper');
const prevPageBtn = document.getElementById('prevPage');
const nextPageBtn = document.getElementById('nextPage');
const saveWholeBookBtn = document.getElementById('saveWholeBook');

// Modals
const viewModal = document.getElementById('viewModal');
const editModal = document.getElementById('editModal');
const viewClose = document.getElementById('viewClose');
const editClose = document.getElementById('editClose');
const saveEditedPoem = document.getElementById('saveEditedPoem');

let currentPage = 0;
let currentEditIndex = -1;

function savePoem(title, text) {
    let poems = JSON.parse(localStorage.getItem('poems')) || [];
    poems.push({ title, text });
    localStorage.setItem('poems', JSON.stringify(poems));
}

function displaySavedPoems() {
    let poems = JSON.parse(localStorage.getItem('poems')) || [];
    pageWrapper.innerHTML = ''; // Clear the previous content

    for (let i = currentPage * 2; i < currentPage * 2 + 2 && i < poems.length; i++) {
        const poemDiv = document.createElement('div');
        poemDiv.classList.add('page');
        
        // Creating the HTML structure for the poem with a line break between title and text
        poemDiv.innerHTML = 
            <h3>${poems[i].title}</h3>
            <hr>  <!-- Line break between title and poem -->

            <pre>${poems[i].text}</pre> <!-- Use <pre> to preserve whitespace and line breaks -->
            <div class="action-buttons">
                <button onclick="viewPoem(${i})">View</button>
                <button onclick="editPoem(${i})">Edit</button>
                <button onclick="deletePoem(${i})">Delete</button>
                <button onclick="savePoemAsPDF(${i})">Save as PDF</button> <!-- Save as PDF Button -->
            </div>
        ;
        pageWrapper.appendChild(poemDiv);
    }

    prevPageBtn.disabled = currentPage === 0;
    nextPageBtn.disabled = (currentPage + 1) * 2 >= poems.length;
}

function viewPoem(index) {
    let poems = JSON.parse(localStorage.getItem('poems')) || [];
    document.getElementById('viewTitle').innerText = poems[index].title;
    document.getElementById('viewPoemText').innerText = poems[index].text;
    viewModal.style.display = 'block';
}

function editPoem(index) {
    let poems = JSON.parse(localStorage.getItem('poems')) || [];
    currentEditIndex = index;
    document.getElementById('editTitle').value = poems[index].title;
    document.getElementById('editText').value = poems[index].text;
    editModal.style.display = 'block';
}

function deletePoem(index) {
    let poems = JSON.parse(localStorage.getItem('poems')) || [];
    poems.splice(index, 1);
    localStorage.setItem('poems', JSON.stringify(poems));
    displaySavedPoems();
}

function saveEditedPoemHandler() {
    let poems = JSON.parse(localStorage.getItem('poems')) || [];
    const updatedTitle = document.getElementById('editTitle').value;
    const updatedText = document.getElementById('editText').value;
    poems[currentEditIndex] = { title: updatedTitle, text: updatedText };
    localStorage.setItem('poems', JSON.stringify(poems));
    displaySavedPoems();
    editModal.style.display = 'none';
}

document.getElementById('submitPoem').addEventListener('click', () => {
    const title = poemTitleInput.value;
    const text = poemTextInput.value;
    if (title && text) {
        savePoem(title, text);
        displaySavedPoems();
        poemTitleInput.value = '';
        poemTextInput.value = '';
    }
});

viewClose.addEventListener('click', () => {
    viewModal.style.display = 'none';
});

editClose.addEventListener('click', () => {
    editModal.style.display = 'none';
});

saveEditedPoem.addEventListener('click', saveEditedPoemHandler);

prevPageBtn.addEventListener('click', () => {
    if (currentPage > 0) {
        currentPage--;
        displaySavedPoems();
    }
});

nextPageBtn.addEventListener('click', () => {
    currentPage++;
    displaySavedPoems();
});

openNotebookBtn.addEventListener('click', () => {
    document.getElementById('notebook').classList.toggle('show');
    displaySavedPoems();
});

saveWholeBookBtn.addEventListener('click', saveWholeBookAsPDF);

// Add jsPDF for saving individual poem and whole book
function savePoemAsPDF(index) {
    let poems = JSON.parse(localStorage.getItem('poems')) || [];
    let poem = poems[index];
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    
    // Add title and poem with a line break
    doc.text(poem.title, 10, 10);
    doc.text("\n", 10, 20); // Adds a line break between title and poem
    doc.text(poem.text, 10, 30);

    doc.save(${poem.title}.pdf);
}

function saveWholeBookAsPDF() {
    let poems = JSON.parse(localStorage.getItem('poems')) || [];
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    poems.forEach((poem, index) => {
        if (index > 0) doc.addPage();
        doc.text(poem.title, 10, 10);
        doc.text(poem.text, 10, 20);
    });

    doc.save('poem_book.pdf');
}

/* Keep the original styles as is */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    background-color: #f7f7f7;
    color: #333;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    padding: 20px;
}

.container {
    width: 100%;
    max-width: 900px;
    background-color: #fff;
    padding: 40px;
    border-radius: 10px;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    text-align: center;
}

header h1 {
    font-size: 2.5rem;
    margin-bottom: 10px;
}

header p {
    font-size: 1.2rem;
}

.form input,
.form textarea {
    width: 100%;
    padding: 12px;
    margin: 10px 0;
    border-radius: 10px;
    border: 1px solid #ddd;
    font-size: 1rem;
}

.form button {
    padding: 10px 20px;
    background-color: #FF6347;
    color: white;
    border: none;
    border-radius: 10px;
    cursor: pointer;
}

.form button:hover {
    background-color: #FF4500;
}

.notebook-container {
    margin-top: 20px;
}

.notebook-btn {
    padding: 12px 30px;
    background-color: #FFD700;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    font-size: 1.2rem;
}

.notebook-btn:hover {
    background-color: #FF6347;
}

.book {
    position: relative;
    width: 100%;
    height: 400px;
    margin-top: 30px;
    perspective: 1500px;
    left: -72px;
}

.notebook {
    position: absolute;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    transition: transform 1s ease;
    display: flex;
    justify-content: center;
}

.notebook.show {
    transform: rotateY(0deg);
}

.pageWrapper {
    position: relative;
    width: 79%;
    height: 100%;
    display: flex;
    justify-content: space-between;
    left: -46px;
    top: 23px;
}

.page {
    width: 48%;
    height: 100%;
    background-color: white;
    margin: 0 1%;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
    opacity: 0;
    animation: fadeIn 1s forwards;
    transform-origin: center;
    position: relative;
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: scale(0.95);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

.action-buttons {
    position: absolute;
    bottom: 15px;
    width: 100%;
    display: flex;
    justify-content: space-evenly;
    left: 4px;
}

.action-buttons button {
    padding: 6px 12px;
    border-radius: 5px;
    border: 1px solid #ddd;
    background-color: #FF6347;
    color: white;
    cursor: pointer;
}

.action-buttons button:hover {
    background-color: #FF4500;
}

#saveEditedPoem {
    background-color: #FFD700;
}

#saveEditedPoem:hover {
    background-color: #FF6347;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
    background-color: white;
    margin: 10% auto;
    padding: 30px;
    border-radius: 10px;
    width: 60%;
    max-width: 500px;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
    position: relative;
}

.close {
    color: #aaa;
    font-size: 28px;
    font-weight: bold;
    position: absolute;
    top: 5px;
    right: 10px;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}

.modal-header {
    font-size: 1.5rem;
    color: #FF6347;
    margin-bottom: 20px;
}

.modal .form input,
.modal .form textarea {
    width: 100%;
    padding: 12px;
    margin: 10px 0;
    border-radius: 10px;
    border: 1px solid #ddd;
    font-size: 1rem;
}

.modal .form button {
    padding: 10px 20px;
    background-color: #FF6347;
    color: white;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    font-size: 1.1rem;
}

.modal .form button:hover {
    background-color: #FF4500;
}

@media (max-width: 768px) {
    .modal-content {
        width: 80%;
        padding: 20px;
    }
}

@media (max-width: 480px) {
    .modal-content {
        width: 90%;
        padding: 15px;
    }
}

.nav-arrows {
    position: absolute;
    bottom: 10px;
    width: 100%;
    display: flex;
    justify-content: space-between;
    padding: 0 10px;
    z-index: 10;
}

.nav-btn {
    padding: 12px 20px;
    background-color: transparent;
    border: none;
    color: #FF6347;
    font-size: 2rem;
    cursor: pointer;
    transition: color 0.3s ease, transform 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}

#prevPage {
    left: 321px;
    top: 115px;
}

#nextPage {
    right: 664px;
    top: 115px;
}

.nav-btn:hover {
    color: #FF4500;
    transform: scale(1.1);
}

.nav-btn:disabled {
    color: #ccc;
    cursor: not-allowed;
}

.nav-btn:disabled:hover {
    color: #ccc;
}
